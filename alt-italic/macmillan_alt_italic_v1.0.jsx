main();function main(){    app.scriptPreferences.userInteractionLevel = UserInteractionLevels.interactWithAll;    var myApplicationFonts = app.fonts;    var myDocument = app.documents.item(0);    var myStory = myDocument.stories.item(0);    var myDocumentFonts = myDocument.fonts;    var myFontNames = myApplicationFonts.everyItem().name;    var myDocumentFontNames = myDocument.fonts.everyItem().name;    var PreFontList= new Array();    var FontList= new Array();    for(var myCounter = 0; myCounter<myDocumentFontNames.length; myCounter++){        PreFontList.push(myDocumentFontNames[myCounter]);    }    var pstyles = myDocument.allParagraphStyles;    var testStyle;     for(var myCounter = 0;myCounter<pstyles.length; myCounter++){         testStyle = pstyles[myCounter].appliedFont.name;         if ( IsInArray(testStyle, PreFontList) ) {             if (!IsInArray(testStyle, FontList) ) {                 FontList.push(testStyle);             }         }    }    FontList.sort();    selectArrayElementsViaCheckboxes(FontList);}function selectArrayElementsViaCheckboxes(FontList) {        app.scriptPreferences.userInteractionLevel = UserInteractionLevels.INTERACT_WITH_ALL ;        var colLimit = 30;        var CheckBoxIndex = new Array () ;        var DropDownIndex = new Array();        var styChoices = new Array (          "i-san1",          "i-san2",          "i-ser1",          "i-ser2",          "i-skew1",          "i-skew2",          "rom1",          "rom2",          "No selection..." );        var FontName;        var FontSettings;        var bCheck;        var SelInd;        var listDialog = app.dialogs.add({canCancel:true}) ;        var buttons = new Array () ;        with (listDialog) { //1            with (dialogColumns.add() ) { //2                with ( borderPanels.add() ) { //3                    with ( dialogColumns.add() ) { //4                        staticTexts.add({staticLabel:"If underlying paragraph font is:\t\t\t\t"});                        with (dialogRows.add()) { //5                                for ( var listIndex = 0 ; listIndex < FontList.length ; listIndex++ ) {  //6                                    FontName = FontList[listIndex];                                    FontSettings = GetSettings(FontName);                                    if (FontSettings != "" ) { bCheck =  true; }                                    else { bCheck =  false; }                                    if ( listIndex % colLimit == 0 ) {  var Col = dialogColumns.add(); }                                    with (Col) { CheckBoxIndex[listIndex] = (checkboxControls.add({staticLabel:String(FontName),checkedState:bCheck, minWidth:250}) ); }                              } //6                        } //5                    } //4                    with ( dialogColumns.add() ) { //4                        staticTexts.add({staticLabel:"Change any char style i to:"});                        with (dialogRows.add()) { //5                                for ( var listIndex2 = 0 ; listIndex2 < FontList.length ; listIndex2++ ) {  //6                                    if ( listIndex2 % colLimit == 0 ) {  var Col2 = dialogColumns.add(); }                                    FontName = FontList[listIndex2];                                    FontSettings = GetSettings(FontName);                                    for ( var ind=0; ind < styChoices.length; ind++){                                      if ( styChoices[ind] === FontSettings) {                                        SelInd = ind;                                        return;                                      }                                      SelInd = ind;                                    }                                    with (Col2) { DropDownIndex[listIndex2] = dropdowns.add({stringList:styChoices, selectedIndex: SelInd}); }                              } //6                        } //5                    } //4                } //3            } //2     }//1    //-- Show the dialog    var listResult = listDialog.show() ;    if ( listResult ) { //1        var CheckedValues = new Array () ;        var DropDownValues = new Array ();        for ( var listIndex = 0 ; listIndex < FontList.length ; listIndex++ ) {            CheckedValues.push ( (CheckBoxIndex[listIndex].checkedState)) ;            DropDownValues.push (styChoices[DropDownIndex[listIndex].selectedIndex]);            if (CheckedValues[listIndex] == true && DropDownValues[listIndex] == "No selection...") {              return [alert ("Ending script because no replacement style selected for <" + FontList[listIndex] + ">" ) ]            }         }         var replaceFont = new Array();         var replaceStyle = new Array();         for ( var listIndex = 0 ; listIndex < CheckedValues.length ; listIndex++ ) {            if (CheckedValues[listIndex] == true) {               replaceFont.push (FontList[listIndex]);               replaceStyle.push (DropDownValues[listIndex]);             }         }         //for ( var listIndex = 0 ; listIndex < replaceFont.length ; listIndex++ ) {   alert("Font: " + replaceFont[listIndex] + " | New Style: " + replaceStyle[listIndex] )}         findStyle(replaceFont, replaceStyle)         SaveSettings(replaceFont, replaceStyle, FontList)        return [] ;   }   else { return [] ; }}function findStyle(rFonts, rStyles){    checkOutICML();    var myDocument = app.documents.item(0);    //Clear the find/change preferences.    app.findTextPreferences = NothingEnum.nothing;    app.changeTextPreferences = NothingEnum.nothing;    //Set the find options.    app.findChangeTextOptions.caseSensitive = false;    app.findChangeTextOptions.includeFootnotes = false;    app.findChangeTextOptions.includeHiddenLayers = false;    app.findChangeTextOptions.includeLockedLayersForFind = false;    app.findChangeTextOptions.includeLockedStoriesForFind = false;    app.findChangeTextOptions.includeMasterPages = false;    app.findChangeTextOptions.wholeWord = false;    app.findTextPreferences.appliedCharacterStyle = "ital (i)";    var missingFind = app.activeDocument.findText();    var myDoc = app.documents[0];    var myStyle;    var myFont;    var changeMade = 0;    for ( var listIndex = 0 ; listIndex < missingFind.length; listIndex++ ) {        myStyle = missingFind[listIndex].appliedParagraphStyle.name;        //alert(myStyle);        myFont = myDoc.paragraphStyles.item(myStyle).appliedFont.name;        //alert(myFont);        for ( var listIndex2 = 0 ; listIndex2 < rFonts.length ; listIndex2++ ) {            if ( myFont == rFonts[listIndex2]) {                try{                    myCharacterStyle = myDocument.characterStyles.item(rStyles[listIndex2]);                    //If the style does not exist, trying to get its name will generate an error.                    myName = myCharacterStyle.name;                    changeMade = 1;                }                catch (myError){                    //The style did not exist, so create it.                    myCharacterStyle = myDocument.characterStyles.add({name:rStyles[listIndex2]});                    changeMade = 1;                }                missingFind[listIndex].appliedCharacterStyle = rStyles[listIndex2];             }        }    }    if (changeMade > 0) {      alert("Changes made");    } else {      alert("No changes made");    }    app.findTextPreferences = NothingEnum.nothing;    app.changeTextPreferences = NothingEnum.nothing;}function SaveSettings(saveFont, saveStyle, FontList){    for ( var listIndex = 0 ; listIndex < FontList.length ; listIndex++ ) {      app.activeDocument.insertLabel(FontList[listIndex], "");    }    for ( var listIndex = 0 ; listIndex < saveFont.length ; listIndex++ ) {      app.activeDocument.insertLabel(saveFont[listIndex], saveStyle[listIndex]);   } }function GetSettings(FontName){    return app.activeDocument.extractLabel(FontName);}function lookupISBN(){        var iDial = new Window('dialog', 'ISBN Lookup');        var panel1 = iDial.add('panel', undefined, 'If you have saved options for this title, type the ISBN below:');        var ISBNBox= panel1.add('edittext', undefined, '');        ISBNBox.minimumSize.height = 25;        ISBNBox.minimumSize.width = 200;        var group = iDial.add('group', undefined, 'Group title');        lookupBtn = panel1.add('button', undefined, 'Lookup', {name:'close'});        lookupBtn.onClick = function(){            iDial.hide();            return false;          }         closeBtn = panel1.add('button', undefined, 'Not Now', {name:'close'});         closeBtn.onClick = function(){            iDial.hide();            return false;          }      iDial.show();}function checkOutICML() {    var myCount = 0;    var myDocument = app.documents.item(0);    var myStories = myDocument.stories;    for ( var listIndex = 0 ; listIndex < myStories.length ; listIndex++ ) {            if (myDocument.stories[listIndex].lockState==LockStateValues.NONE) {}            else {                myDocument.stories[listIndex].checkOut();                myCount++;            }    }}function IsInArray(myString, myArray) {     for (var x in myArray) {          if (myString == myArray[x]) {               return true;          }     }     return false;}