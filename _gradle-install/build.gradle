

/******** ********  DEFINITIONS  ******** ********/
def homePath = System.properties['user.home']
def rsfolderName = 'RSuiteStyleTemplate'
def oldstylesFolderName = 'MacmillanStyleTemplate'
def rstemplateFolderName = 'StyleTemplate_auto-generate'
def targetDir = '../target'
def rstargetDir = targetDir + '/' + rsfolderName
def mactargetDir = targetDir + '/' + oldstylesFolderName

def rsTemplateFiles = [
  'RSuite_styles.txt',
  'RSuite_NoColor.dotx',
  'RSuite.dotx',
  'sections.txt',
  'breaks.txt',
  'containers.txt'
  ]

/* these definitions are for MacOS, re-setting below if Windows OS detected */
def hostOS = 'macOS'
def wordStartPath = homePath + '/Library/Group Containers/UBF8T346G9.Office/User Content.localized/Startup.localized/Word'
def templateFoldersPath = homePath + '/Library/Containers/com.microsoft.Word/Data/Documents'

if (System.getProperty('os.name').toLowerCase().contains('windows')) {
  hostOS = 'windows'
  wordStartPath = homePath + '/AppData/Roaming/Microsoft/Word/STARTUP'
  templateFoldersPath = homePath + '/AppData/Roaming'
}

def dotm_xattr = "57 58 54 4D 4D 53 57 44 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
def old_dotm_files = [
  'macmillan_CoverCopy.dotm',
  'macmillan_NoColor.dotm',
  'macmillan.dotm',
  'MacmillanGT.dotm'
  ]

def checkWord = { ->
  def wordStatus = new ByteArrayOutputStream()
  if(hostOS == 'macOS') {
    exec {
      commandLine 'sh', './checkWord.sh'
      standardOutput = wordStatus
    }
  } else {
    exec {
      commandLine './checkWord.bat'
      standardOutput = wordStatus
    }
  }
  return wordStatus.toString().trim()
}


project.logger.lifecycle("Host OS: '" + hostOS + "', user home: '" + homePath + "', word-status: '" + checkWord() + "'")


/******** ********  TASKS  ******** ********/
task wordcheck {
  doFirst {
    if (checkWord() == 'not running') {
      println 'Word is not running, proceeding ... '
    } else {
      def errstring = 'MICROSOFT WORD IS RUNNING.\nPlease QUIT WORD and try again'
      println errstring
      throw new InvalidUserDataException(errstring)
    }
  }
}

task macfix_a {
  dependsOn 'wordcheck'
  doFirst {
    if(hostOS == 'macOS') {
      println "Rm'ing quarantine xattrs of files since we're on a Mac"
      exec {
        commandLine 'sh', './rm_quarantine.sh'
      }
    } else {
      exec {
        commandLine 'cmd', '/c', 'echo We\'re on Windows, skipping Mac quarantine-fix'
      }
    }
  }
}

task copyRSfiles {
  doFirst {
    println "Deleting existing rs_template dir"
    delete templateFoldersPath + '/' + rsfolderName
  }
  dependsOn 'macfix_a'
  doLast {
    println "Copying rsuite files . . ."
      copy {
        from "../RSuite_Word-template.dotm"
        into templateFoldersPath + '/' + rsfolderName
      }
      copy {
        from "../StyleTemplate_auto-generate"
        into templateFoldersPath + '/' + rsfolderName + '/StyleTemplate_auto-generate'
      }
  }
}

task copyOldfiles {
  doFirst {
    println "deleting old Macmillan templates dir .. "
    delete templateFoldersPath + '/' + oldstylesFolderName
  }
  dependsOn 'macfix_a'
  doLast {
    copy {
      from "../oldStyleTemplate/MacmillanStyleTemplate"
      into templateFoldersPath + '/' + oldstylesFolderName
      println "re-installed old Macmillan templates dir .. "
    }
  }
}

task copyTS {
  doFirst {
    println "Deleting existing word startup dir"
    delete wordStartPath
  }
  dependsOn 'macfix_a'
  doLast {
    copy {
      from "../template_switcher.dotm"
      into wordStartPath
      println "wrote new template_switcher.dotm to Startup"
    }
  }
}

task macfix_b(dependsOn: ['copyRSfiles', 'copyOldfiles', 'copyTS']) {
  doFirst {
    if(hostOS == 'macOS') {
      println "Assigning creator-code xattrs for dotm files since we're on a Mac"
      exec {
        commandLine 'xattr', '-wx', 'com.apple.FinderInfo', dotm_xattr, wordStartPath + '/template_switcher.dotm'
      }
      exec {
        commandLine 'xattr', '-wx', 'com.apple.FinderInfo', dotm_xattr, templateFoldersPath +'/'+ rsfolderName + '/RSuite_Word-template.dotm'
      }
      old_dotm_files.each { dotm ->
        exec {
          commandLine 'xattr', '-wx', 'com.apple.FinderInfo', dotm_xattr, templateFoldersPath +'/'+ oldstylesFolderName + '/' + dotm
        }
      }
    } else {
      exec {
        commandLine 'cmd', '/c', 'echo We\'re on Windows, skipping Mac creator code dotm fixes'
      }
    }
  }
}

task install(dependsOn: ['copyRSfiles', 'copyOldfiles', 'copyTS', 'macfix_b']) {
  doFirst {
    println "Running all installation tasks..."
  }
}

task oscheck {
  doFirst {
    if(hostOS == 'windows') {
      println "we're running windows, proceeding"
    } else {
      def errstring = 'ERROR:\nRunning _build_ on MacOS will not update .dot version strings.' +
        '\nTry on a PC, or run again like this: ./gradlew force_build'
      println errstring
      throw new InvalidUserDataException(errstring)
    }
  }
}

task build(dependsOn: ['oscheck', 'wordcheck', 'force_build']) {
  doFirst {
    println "Running build tasks..."
  }
}

task force_build {
  /*def standardOutput = new ByteArrayOutputStream()
  def errorOutput = new ByteArrayOutputStream()*/
  doFirst {
    if(hostOS == 'windows') {
      println "attempting to set template versions .."
      exec {
        commandLine './setVersions.bat'
      }
      /* println "version-set stdOut: " + standardOutput.toString().trim()
      println "version-set stdErr: " + errorOutput.toString().trim() */
    } else {
      println '* WARNING:\n* Running _build_ on MacOS will not update .dot version strings.' +
        '\n* Use a Windows machine to properly build your project.'
    }
    println "Deleting existing target dir"
    delete targetDir
  }
  doLast {
    copy {
      from "../oldStyleTemplate/MacmillanStyleTemplate"
      into mactargetDir
      println "populated old Macmillan templates dir .. "
    }
    copy {
      from "../RSuite_Word-template.dotm"
      into rstargetDir
      println "moved RS_Wordtemplate into place .. "
    }
    copy {
      from "../template_switcher.dotm"
      into targetDir
      println "moved template_switcher into place .. "
    }
    rsTemplateFiles.each { rstFile ->
      copy {
        from "../" + rstemplateFolderName + "/" + rstFile
        into rstargetDir + "/" + rstemplateFolderName
        println "moved " + rstFile + " into place .. "
      }
    }
  }
}
force_build.mustRunAfter wordcheck
force_build.mustRunAfter oscheck
